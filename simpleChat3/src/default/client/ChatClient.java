// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. *  * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	String id;	ObservableChat obs;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 * 	 * @param host	 *            The server to connect to.	 * @param port	 *            The port number to connect on.	 * @param clientUI	 *            The interface type variable.	 */	public ChatClient(String host, int port, ChatIF clientUI)			throws IOException {		super(host, port); // Call the superclass constructor		this.clientUI = clientUI;		// openConnection();	}	// Instance methods ************************************************	/**	 * This method handles all data coming from the UI	 * 	 * @param message	 *            The message from the UI.	 * @throws IOException	 */	public void handleMessageFromClientUI(String message) throws IOException {		// delegue le traitement du message a observableChat		obs.handleMessageFromClientUI(message);	}	@Override	public void update(Observable o, Object msg) {		// traiter l'affichage du message par le client		clientUI.display(msg.toString());	}}// End of ChatClient class