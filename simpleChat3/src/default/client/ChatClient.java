// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. *  * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	String id;	ObservableChat obs;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 * 	 * @param host	 *            The server to connect to.	 * @param port	 *            The port number to connect on.	 * @param clientUI	 *            The interface type variable.	 */	public ChatClient(String host, int port, ChatIF clientUI) {		this.clientUI = clientUI;	}	// Instance methods ************************************************	/**	 * This method handles all data coming from the UI	 * 	 * @param message	 *            The message from the UI.	 * @throws IOException	 */	public void handleMessageFromClientUI(String message) throws IOException {		// delegue le traitement du message a observableChat		try {			if (message.startsWith(CommandTable.quit) && obs.isConnected()) {				this.quit();			} else if (message.startsWith(CommandTable.quit)					&& !obs.isConnected()) {				System.exit(0);			} else if (message.startsWith(CommandTable.logoff)					&& obs.isConnected()) {				obs.sendToServer(message);				obs.closeConnection();			} else if (message.startsWith(CommandTable.logoff)					&& !obs.isConnected()) {				clientUI.display("You are already disconnected");			} else if (message.startsWith(CommandTable.login)					&& !obs.isConnected()) {				obs.openConnection();				obs.sendToServer(message);			} else if (message.startsWith(CommandTable.login)					&& obs.isConnected()) {				clientUI.display("You are already connected");			} else if (message.startsWith(CommandTable.getPort)) {				this.handleMessageFromClientUI(String.valueOf(obs.getPort()));			} else if (message.startsWith(CommandTable.setPort)					&& !obs.isConnected()) {				obs.setPort(Integer.parseInt(message.substring(9)));			} else if (message.startsWith(CommandTable.setPort)					&& obs.isConnected()) {				clientUI.display("You are already connected. The port can not be changed");			} else if (message.startsWith(CommandTable.getHost)) {				this.handleMessageFromClientUI(String.valueOf(obs.getHost()));			} else if (message.startsWith(CommandTable.setHost)					&& !obs.isConnected()) {				obs.setHost(message.substring(9));			} else if (message.startsWith(CommandTable.setHost)					&& obs.isConnected()) {				clientUI.display("You are already connected. The host can not be changed");			} else if (obs.isConnected()) {				obs.sendToServer(message);			} else {				clientUI.display("You need to enter your login to be connected to the chat. Please use the command : #login <login>");			}		} catch (IOException e) {			this.handleMessageFromClientUI("Could not send message to server.  Terminating client.");			quit();		}	}	private void quit() {		// TODO Auto-generated method stub		obs.quit();	}//	<-----------------------------------------------//	<-----------------------------------------------		public void update(Observable o, Object msg) {		// traiter l'affichage du message par le client		clientUI.display(msg.toString());	}	//	<-----------------------------------------------//	<-----------------------------------------------}// End of ChatClient class