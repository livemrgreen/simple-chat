// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;import javax.swing.*;import client.*;import common.*;/** * This class constructs the UI for a chat client. It implements the chat * interface in order to activate the display() method. Warning: Some of the * code here is cloned in ServerConsole *  * @author Emmanuelle Ithier * @author Yannick Paz * @version 17 jan 2013 */public class ClientConsole extends JFrame implements ChatIF, ActionListener {	// Class variables *************************************************	/**	 * The default port to connect on.	 */	final public static int DEFAULT_PORT = 5555;	// Instance variables **********************************************	/**	 * The instance of the client that created this ConsoleChat.	 */	ChatClient client;		public String host;	public int port = -1;	public String id;	public JPanel connexion;	public JPanel ecriture;	public JPanel affichage;	public JTextField portText;	public JTextField hostText;	public JTextField loginText;	public JTextArea dialogue;	public JTextArea message;	// Constructors ****************************************************	/**	 * Constructs an instance of the ClientConsole UI.	 * 	 * @param host	 *            The host to connect to.	 * @param port	 *            The port to connect on.	 */	public ClientConsole(String host, int port) {		super();		createAndShowGUI();	}	public void createAndShowGUI() {		// initialisation de la disposition principale		this.setLayout(new BorderLayout());		// partie connexion		this.connexion = new JPanel();		connexion.setLayout(new FlowLayout());		// port		JLabel port1 = new JLabel("Port :");		this.portText = new JTextField(15);		connexion.add(port1);		connexion.add(portText);		// host		JLabel host1 = new JLabel("Host :");		this.hostText = new JTextField(15);		connexion.add(host1);		connexion.add(hostText);		// login		JLabel login = new JLabel("Login :");		this.loginText = new JTextField(15);		connexion.add(login);		connexion.add(loginText);		// bouton pour se connecter		JButton seconnecter = new JButton("Connexion");		connexion.add(seconnecter);		seconnecter.addActionListener(this);		// bouton pour se dŽconnecter		JButton seDeconnecter = new JButton("Deconnexion");		connexion.add(seDeconnecter);		seDeconnecter.addActionListener(this);		// partie affichage des messages		JPanel affichage = new JPanel();		this.dialogue = new JTextArea(4, 20);		affichage.add(dialogue);		// partie Žcriture des messages		JPanel ecriture = new JPanel();		ecriture.setLayout(new FlowLayout());		this.message = new JTextArea(4, 20);		ecriture.add(message);		JButton envoyer = new JButton("Envoyer");		envoyer.addActionListener(this);		ecriture.add(envoyer);		JButton quitter = new JButton("Quitter");		quitter.addActionListener(this);		ecriture.add(quitter);		this.add(connexion, BorderLayout.NORTH);		this.add(affichage, BorderLayout.CENTER);		this.add(ecriture, BorderLayout.SOUTH);		this.pack();		this.setVisible(true);	}	// Instance methods ************************************************	/**	 * This method waits for input from the console. Once it is received, it	 * sends it to the client's message handler.	 */	public void accept() {		try {			BufferedReader fromConsole = new BufferedReader(					new InputStreamReader(System.in));			String message;			while (true) {				message = fromConsole.readLine();				client.handleMessageFromClientUI(message);			}		} catch (Exception ex) {			System.out.println("Unexpected error while reading from console!");		}	}	/**	 * This method overrides the method in the ChatIF interface. It displays a	 * message onto the screen.	 * 	 * @param message	 *            The string to be displayed.	 */	public void display(String message) {		System.out.println("> " + message);	}	// Class methods ***************************************************	/**	 * This method is responsible for the creation of the Client UI.	 * 	 * @param args	 *            [0] The host to connect to.	 */	public static void main(String[] args) {		String host = "";		ClientConsole chat = new ClientConsole(host, DEFAULT_PORT);		chat.accept(); // Wait for console data	}	public void actionPerformed(ActionEvent e) {		String boutonAppuye = (String) e.getActionCommand();		if (boutonAppuye == "Quitter") {			System.exit(0);		}		else if(boutonAppuye == "Connexion") {			this.port = Integer.parseInt(this.portText.getText());			if (this.port == -1) {				this.port = DEFAULT_PORT;			}			this.host = this.hostText.getText();			this.id = this.loginText.getText();			if (this.id == null) {				this.id = "anonymous";			}			try {				client = new ChatClient(this.host, this.port, this);			} catch (IOException e1) {				e1.printStackTrace();			}		}	}}// End of ConsoleChat class